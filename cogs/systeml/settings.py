import disnake
from disnake.ext import commands
import datetime 
from database.db import Db
import pytz

db = Db()
moscow_tz = pytz.timezone('Europe/Moscow')


class EternalRole(disnake.ui.StringSelect):
    def __init__(self):
        eternal_role_list = list(db.get_eternal_role())

        role = [role for role in guild.roles if role.name != '@everyone' if role.id != eternal_role_list]
        
        options = [
            disnake.SelectOption(label = f'{i.name} üé≠ ', value = f'{i.id}') for i in role
        ]
        super().__init__(placeholder = 'EternalRole', options = options)
    async def callback(self, interaction: disnake.MessageInteraction):
        db.insert_eternal_role(interaction.values[0])
        await interaction.response.edit_message(f'–†–æ–ª—å —Å id`{interaction.values[0]}` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –≤–µ—á–Ω–∞—è —Ä–æ–ª—å.', view = None)

class TemporaryRole(disnake.ui.StringSelect):
    def __init__(self):
        options = [

        ]
        super().__init__(placeholder = '', options = options)
    async def callbakc(self, interaction: disnake.MessageInteraction):
        pass

class WorksRole(disnake.ui.StringSelect):
    def __init__(self):
        options = [

        ]
        super().__init__(placeholder = '', options = options)
    async def callbakc(self, interaction: disnake.MessageInteraction):
        pass

class ChangeCurrency(disnake.ui.StringSelect):
    def __init__(self):
        options = [

        ]
        super().__init__(placeholder = '', options = options)
    async def callbakc(self, interaction: disnake.MessageInteraction):
        pass

class EditBonuses(disnake.ui.StringSelect):
    def __init__(self):
        options = [

        ]
        super().__init__(placeholder = '', options = options)
    async def callbakc(self, interaction: disnake.MessageInteraction):
        pass

class EconomyDrop(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label = '–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—á–Ω—ã–µ —Ä–æ–ª–∏', emoji = 'üõé'),
            disnake.SelectOption(label = '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏', emoji = 'üõé'),
            disnake.SelectOption(label = '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —Ä–æ–ª–∏', emoji = 'üõé'),
            disnake.SelectOption(label = '–ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É', emoji = 'üíµ'),
            disnake.SelectOption(label = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–Ω—É—Å–æ–≤', emoji = 'üí∞')
        ]
        super().__init__(placeholder = 'Economy', options = options)
    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == '–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—á–Ω—ã–µ —Ä–æ–ª–∏':
            await interaction.response.edit_message('', view = EternalRoleMenu())
        elif self.values[0] == '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏':
            await interaction.response.edit_message('', view = TemporaryRoleMenu())
        elif self.values[0] == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —Ä–æ–ª–∏':
            await interaction.response.edit_message('', view = WorksRoleMenu())
        elif self.values[0] == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É':
            await interaction.response.edit_message('', view = ChangeCurrencyMenu())
        elif self.values[0] == '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–Ω—É—Å–æ–≤':
            await interaction.response.edit_message('', view = EditBonusesMenu())

class Functionn(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label = '**–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤**', description = '–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤.', emoji = 'üõ°')
        ]
        super().__init__(placeholder = 'Settings function', options = options)

    async def callback(self, inter: disnake.MessageInteraction):
        await inter.response.edit_message('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤', view = ChannelsLogMenu())   

class ChannelsLog(disnake.ui.StringSelect):
    def __init__(self):
        channel = [channel for channel in guild.channels if channel.type == disnake.ChannelType.text]
        options = [
            disnake.SelectOption(label = f'{i.name}', description = f'{i.id}', emoji = 'üìÉ', value = f'{i.id}') for i in channel                                
        ]
        super().__init__(placeholder = 'Channel select', options = options)

    async def callback(self, inter: disnake.MessageInteraction):
        db.update_tabel_settings(inter.values[0])
        await inter.response.edit_message(f'–ö–∞–Ω–∞–ª —Å ID {inter.values[0]} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω.', view = None)

class ChannelsLogMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(ChannelsLog())

class Automod(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label = '**–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞**', description = '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞.', emoji = 'üõ°')
        ]
        super().__init__(placeholder = 'Settings automod', options = options)

    async def callback(self, inter: disnake.MessageInteraction):
        await inter.response.edit_message('1', view = None)

class AutomodSettingsMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Automod())

class FunctionSettingsMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Functionn())
    
class EconomySettingsMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(EconomyDrop())

class EternalRoleMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(EternalRole())

class TemporaryRoleMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(TemporaryRole())

class WorksRoleMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(WorksRole())

class ChangeCurrencyMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(ChangeCurrency())

class EditBonusesMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(EditBonuses())

class Dropdown(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label = '–õ–æ–≥–∏', description = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.', emoji = '‚öô'),
            disnake.SelectOption(label = '–ú–æ–¥–µ—Ä–∞—Ü–∏—è', description = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–º–æ–¥–∞', emoji = 'üëë'),
            disnake.SelectOption(label = '–≠–∫–æ–Ω–æ–º–∏–∫–∞', description = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞', emoji = 'üåå')
        ]
        super().__init__(placeholder = 'Settings', options = options) 

    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == '–õ–æ–≥–∏':
            await interaction.response.edit_message('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞:', view = FunctionSettingsMenu())
        elif self.values[0] == '–ú–æ–¥–µ—Ä–∞—Ü–∏—è':
            await interaction.response.edit_message('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ ', view = AutomodSettingsMenu())
        elif self.values[0] == '–≠–∫–æ–Ω–æ–º–∏–∫–∞':
            await interaction.response.edit_message('1', view = EconomySettingsMenu())

class DropdownSettingsMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Dropdown())

class Settings(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name = 'settings', description = '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–∏–±–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.')
    async def settings(self, ctx: disnake.ApplicationCommandInteraction):
        global guild
        guild = ctx.guild
        await ctx.send('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞', view=DropdownSettingsMenu())



def setup(bot):
    bot.add_cog(Settings(bot))