import disnake
from disnake.ext import commands
import pytz
import datetime
import sqlite3

guild = None
global conn
conn = sqlite3.connect('tlogs.db')
global c
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS tlogs(channel_id TEXT)''')


class Functionn(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label = '**–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤**', description = '–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤.', emoji = 'üõ°')
        ]
        super().__init__(placeholder = 'Settings function', options = options)

    async def callback(self, inter: disnake.MessageInteraction):
        await inter.response.send_message('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤', view = ChannelslMenu())   

class Channelsl(disnake.ui.StringSelect):
    def __init__(self):
        channel = [channel for channel in guild.channels if channel.type == disnake.ChannelType.text]
        options = [
            disnake.SelectOption(label = f'{i.name}', description = f'{i.id}', emoji = 'üìÉ', value = f'{i.id}') for i in channel                                
        ]
        super().__init__(placeholder = 'Channel select', options = options)

    async def callback(self, inter: disnake.MessageInteraction):
        c.execute("UPDATE tlogs SET channel_id = ?", (inter.values[0],))
        conn.commit()
        await inter.response.send_message(f'–ö–∞–Ω–∞–ª —Å ID {inter.values[0]} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω.')

class ChannelslMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Channelsl())

class Automod(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label = '**–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞**', description = '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞.', emoji = 'üõ°')
        ]
        super().__init__(placeholder = 'Settings automod', options = options)

    async def callback(self, inter: disnake.MessageInteraction):
        await inter.response.send_message('1')

class AutomodSettingsMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Automod())

class FunctionSettingsMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Functionn())

class Dropdown(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π', description = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.', emoji = '‚öô'),
            disnake.SelectOption(label = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏', description = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–º–æ–¥–∞', emoji = 'üëë')
        ]
        super().__init__(placeholder = 'Settings', options = options) 

    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π':
            await interaction.response.send_message('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞:', view = FunctionSettingsMenu())
        elif self.values[0] == '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏':
            await interaction.response.send_message('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ ', view = AutomodSettingsMenu())

class DropdownMenu(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Dropdown())

class Settings(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name = 'settings', description = '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–∏–±–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.')
    async def settings(self, ctx: disnake.ApplicationCommandInteraction):
        global guild
        guild = ctx.guild
        await ctx.send('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞', view=self.DropdownMenu())



def setup(bot):
    bot.add_cog(Settings(bot))